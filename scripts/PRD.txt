# NewsHub - Tuist 기반 모듈화 뉴스 리더 앱

## 프로젝트 개요

**프로젝트**: NewsHub - Tuist 기반 모듈화 뉴스 리더 앱  
**목표**: Tuist를 활용한 모듈화 아키텍처 학습 및 포트폴리오 구축  
**플랫폼**: iOS (SwiftUI + Combine)  
**기간**: 4일 예상

### 비즈니스 목표
- Tuist를 활용한 대규모 iOS 프로젝트 모듈화 경험 축적
- Clean Architecture + MVVM 패턴 실전 적용
- API 기반 데이터 처리 및 상태 관리 구현
- 테스트 가능한 아키텍처 설계 능력 향상

### 기술 목표
- 모듈 간 의존성 관리 및 순환 참조 방지
- Repository Pattern을 통한 데이터 레이어 추상화
- SwiftUI + Combine을 활용한 Reactive Programming
- 확장 가능하고 유지보수하기 쉬운 코드 구조 구축

## 아키텍처 설계

### 모듈 구조
```
NewsHubApp/
├── App/ (메인 앱 타겟)
│   ├── NewsHubApp.swift
│   ├── ContentView.swift
│   └── Info.plist
├── Core/ (공통 기반 모듈)
│   ├── Models/
│   │   ├── Article.swift
│   │   ├── Source.swift
│   │   └── APIResponse.swift
│   ├── Network/
│   │   ├── APIService.swift
│   │   ├── NetworkError.swift
│   │   └── APIEndpoint.swift
│   └── Utils/
│       ├── Extensions/
│       └── Helpers/
├── DesignSystem/ (UI 컴포넌트)
│   ├── Components/
│   │   ├── NewsCard.swift
│   │   ├── LoadingView.swift
│   │   └── ErrorView.swift
│   ├── Styles/
│   │   ├── Colors.swift
│   │   ├── Typography.swift
│   │   └── Spacing.swift
│   └── Assets/
├── Services/ (비즈니스 로직)
│   ├── NewsService.swift (Repository)
│   └── BookmarkService.swift
└── Features/ (기능별 모듈)
    ├── NewsList/
    │   ├── NewsListView.swift
    │   ├── NewsListViewModel.swift
    │   └── NewsListRow.swift
    ├── NewsDetail/
    │   ├── NewsDetailView.swift
    │   └── NewsDetailViewModel.swift
    └── Bookmark/
        ├── BookmarkView.swift
        └── BookmarkViewModel.swift
```

### 의존성 관계
- App → Features → Services + DesignSystem
- Features → Core
- Services → Core  
- DesignSystem → Core (Models만)
- Core → Foundation/SwiftUI만

## 기능 명세

### MVP 기능
1. **뉴스 목록 (NewsList)**
   - NewsAPI에서 최신 뉴스 가져오기
   - 카드 형태 UI로 제목, 요약, 이미지, 출처 표시
   - Pull-to-refresh로 새로고침
   - 로딩 상태 및 에러 상태 처리

2. **뉴스 상세보기 (NewsDetail)**
   - 선택한 뉴스의 전체 내용 표시
   - 외부 링크로 원본 기사 열기
   - 북마크 추가/제거 기능

3. **북마크 (Bookmark)**
   - 저장된 뉴스 목록 표시
   - UserDefaults를 활용한 로컬 저장
   - 북마크 삭제 기능

### 추가 기능 (시간 허용 시)
- 카테고리별 뉴스 필터링
- 검색 기능
- 다크 모드 지원

## API 설계

### NewsAPI 연동
- Base URL: `https://newsapi.org/v2/`
- 주요 엔드포인트:
  - `GET /top-headlines?country=us`: 미국 주요 뉴스
  - `GET /everything?q={query}`: 검색 기능 (추가 기능)

### 데이터 모델
```swift
struct APIResponse<T: Codable>: Codable {
    let status: String
    let totalResults: Int?
    let articles: [T]?
    let message: String? // 에러 시
}

struct Article: Codable, Identifiable {
    let title: String
    let description: String?
    let url: String
    let urlToImage: String?
    let publishedAt: Date
    let source: Source
    
    var id: String { url }
}

struct Source: Codable {
    let id: String?
    let name: String
}
```

## 기술 사양

### 개발 환경
- Xcode 15+
- iOS 16.0+
- Swift 5.9+
- Tuist 4.x

### 아키텍처 패턴
- **MVVM**: ViewModel에서 비즈니스 로직 처리
- **Repository Pattern**: 데이터 소스 추상화
- **Dependency Injection**: 모듈 간 결합도 최소화
- **Protocol-Oriented Programming**: 테스트 가능한 인터페이스

### 주요 프레임워크
- SwiftUI (UI)
- Combine (Reactive Programming)
- Foundation (Network, JSON)

## 완료 기준 (Definition of Done)

### 기술적 요구사항
- [ ] `tuist generate` 명령어 실행 시 에러 없이 Xcode 프로젝트 생성
- [ ] 모든 모듈이 개별적으로 빌드 가능
- [ ] 순환 의존성 없이 모듈 간 의존성 설정
- [ ] 앱 실행 시 뉴스 목록이 정상적으로 로드
- [ ] 네트워크 에러, 빈 데이터 상태 적절히 처리
- [ ] 북마크 기능이 앱 재시작 후에도 유지

### 품질 요구사항
- [ ] 각 모듈에 최소 1개 이상의 단위 테스트
- [ ] SwiftUI Preview가 모든 주요 화면에서 동작
- [ ] 메모리 누수 없이 네비게이션 동작
- [ ] API 키가 코드에 하드코딩되지 않고 설정 파일로 관리

### 문서화 요구사항
- [ ] 각 모듈의 역할과 책임이 README에 명시
- [ ] 아키텍처 다이어그램 포함
- [ ] 빌드 및 실행 가이드 작성
- [ ] 배운 점과 개선 사항 정리

## 제약사항 및 가정

### 제약사항
- 외부 라이브러리 사용 금지 (순수 iOS SDK만 활용)
- NewsAPI 무료 플랜 한도 (1000 requests/day) 고려
- 4일 내 MVP 완성을 목표로 scope 조정

### 가정
- NewsAPI 키가 정상적으로 발급됨
- 개발 환경에서 인터넷 연결 가능
- iOS 시뮬레이터에서 테스트 수행